// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  subscriber
  author
  editor
  manager
  admin
}

enum UserStatus {
  active
  inactive
  locked
  deleted
}

enum Status {
  draft
  publish
  private
}

model User {
  id            String     @id @unique @default(cuid())
  email         String     @unique
  password      String
  refresh_token String?
  username      String     @unique
  phone_number  String?
  role          Role       @default(subscriber)
  status        UserStatus @default(active)
  first_name    String
  last_name     String
  avatar_id     Int?
  avatar        Media?     @relation("avatar", fields: [avatar_id], references: [id])
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt

  posts              Post[]     @relation("user")
  posts_updated      Post[]     @relation("user_updated")
  media              Media[]    @relation("user")
  media_updated      Media[]    @relation("user_updated")
  categories         Category[] @relation("user")
  categories_updated Category[] @relation("user_updated")

  @@map("vh_users")
}

model Languages {
  id            Int     @id @unique @default(autoincrement())
  ietf_tag      String
  language_code String  @unique
  country_code  String
  language      String
  country       String
  is_active     Boolean

  posts_translations      PostTranslations[]     @relation("posts_language_translation")
  categories_translations CategoryTranslations[] @relation("categories_language_translation")
  media_translations      MediaTranslations[]    @relation("media_language_translation")

  @@map("vh_languages")
}

model Post {
  id               Int      @id @default(autoincrement())
  title            String
  slug             String?  @unique
  description      String
  status           Status   @default(publish)
  thumb_id         Int?
  thumb            Media?   @relation("post_thumb", fields: [thumb_id], references: [id])
  images           String?
  content          String
  timestamp        DateTime
  is_featured      Boolean?
  order            Int?
  meta_title       String?
  meta_description String?

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  user_created_id String
  user_created    User     @relation("user", fields: [user_created_id], references: [id])
  user_updated_id String
  user_updated    User     @relation("user_updated", fields: [user_updated_id], references: [id])

  categories   PostCategory[]     @relation("post")
  translations PostTranslations[] @relation("post_translations")

  @@map("vh_posts")
}

model PostTranslations {
  id               Int       @id @default(autoincrement())
  post_id          Int
  language_code    String
  language         Languages @relation("posts_language_translation", fields: [language_code], references: [language_code])
  title            String?
  description      String?
  content          String?
  meta_title       String?
  meta_description String?

  post Post @relation("post_translations", fields: [post_id], references: [id], onDelete: Cascade)

  @@map("vh_posts_translations")
}

model Category {
  id               Int      @id @default(autoincrement())
  parent_id        Int?
  name             String
  slug             String?  @unique
  description      String?
  status           Status   @default(publish)
  thumb_id         Int?
  thumb            Media?   @relation("category_thumb", fields: [thumb_id], references: [id])
  images           String?
  is_featured      Boolean?
  order            Int?
  meta_title       String?
  meta_description String?

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  user_created_id String
  user_created    User     @relation("user", fields: [user_created_id], references: [id])
  user_updated_id String
  user_updated    User     @relation("user_updated", fields: [user_updated_id], references: [id])

  posts        PostCategory[]         @relation("category")
  translations CategoryTranslations[] @relation("category_translations")

  @@map("vh_categories")
}

model CategoryTranslations {
  id               Int       @id @default(autoincrement())
  category_id      Int
  category         Category  @relation("category_translations", fields: [category_id], references: [id], onDelete: Cascade)
  language_code    String
  language         Languages @relation("categories_language_translation", fields: [language_code], references: [language_code])
  name             String?
  description      String?
  meta_title       String?
  meta_description String?

  @@map("vh_categories_translations")
}

model PostCategory {
  post_id     Int
  post        Post     @relation("post", fields: [post_id], references: [id], onDelete: Cascade)
  category_id Int
  category    Category @relation("category", fields: [category_id], references: [id], onDelete: Cascade)

  @@id([post_id, category_id])
  @@map("vh_post_category")
}

model Media {
  id            Int     @id @default(autoincrement())
  public_id     String
  filename      String
  resource_type String
  format        String
  size          Int
  width         Int
  height        Int
  url           String
  url_cdn       String?
  title         String?
  alt           String?
  description   String?
  status        Status  @default(publish)

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  user_created_id String
  user_created    User     @relation("user", fields: [user_created_id], references: [id])
  user_updated_id String
  user_updated    User     @relation("user_updated", fields: [user_updated_id], references: [id])

  translations MediaTranslations[] @relation("media_translation")
  posts        Post[]              @relation("post_thumb")
  categories   Category[]          @relation("category_thumb")
  User         User[]              @relation("avatar")

  @@map("vh_media")
}

model MediaTranslations {
  id            Int       @id @default(autoincrement())
  media_id      Int
  media         Media     @relation("media_translation", fields: [media_id], references: [id], onDelete: Cascade)
  language_code String
  language      Languages @relation("media_language_translation", fields: [language_code], references: [language_code])
  title         String?
  alt           String?
  description   String?

  @@map("vh_media_translations")
}
