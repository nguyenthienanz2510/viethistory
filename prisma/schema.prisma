// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @unique @default(cuid())
  email         String   @unique
  password      String
  refresh_token String?
  username      String   @unique
  phone_number  String?
  role          String
  status        String
  first_name    String?
  last_name     String?
  avatar        String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  role_name          Role       @relation(fields: [role], references: [name])
  status_name        UserStatus @relation(fields: [status], references: [name])
  posts              Post[]     @relation("user")
  posts_updated      Post[]     @relation("user_update")
  media              Media[]    @relation("user")
  media_updated      Media[]    @relation("user_update")
  categories         Category[] @relation("user")
  categories_updated Category[] @relation("user_update")

  @@map("vh_users")
}

model Role {
  id   Int    @id @unique @default(autoincrement())
  name String @unique
  User User[]

  @@map("vh_roles")
}

model UserStatus {
  id   Int    @id @unique @default(autoincrement())
  name String @unique
  User User[]

  @@map("vh_user_status")
}

model Post {
  id               Int      @id @default(autoincrement())
  title            String
  slug             String?  @unique
  description      String
  status           String
  thumb            Int?
  images           String?
  content          String
  timestamp        DateTime
  order            Int?
  meta_title       String?
  meta_description String?
  meta_keywords    String?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  user_created_id  String
  user_updated_id  String

  status_name   Status         @relation(fields: [status], references: [name])
  user_updated  User           @relation("user_update", fields: [user_updated_id], references: [id])
  user_created  User           @relation("user", fields: [user_created_id], references: [id])
  post_category PostCategory[]

  @@map("vh_posts")
}

model Category {
  id               Int      @id @default(autoincrement())
  parent_id        Int?
  name             String
  slug             String?  @unique
  description      String?
  status           String
  thumb            Int?
  images           String?
  order            Int?
  meta_title       String?
  meta_description String?
  meta_keywords    String?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  user_created_id  String
  user_updated_id  String

  status_name  Status @relation(fields: [status], references: [name])
  user_updated User   @relation("user_update", fields: [user_updated_id], references: [id])
  user_created User   @relation("user", fields: [user_created_id], references: [id])

  post_category PostCategory[]

  @@map("vh_categories")
}

model Status {
  id   Int    @id @unique @default(autoincrement())
  name String @unique

  Post     Post[]
  Category Category[]
  Media    Media[]

  @@map("vh_status")
}

model PostCategory {
  id          Int @id @default(autoincrement())
  post_id     Int
  category_id Int

  post     Post     @relation(fields: [post_id], references: [id])
  category Category @relation(fields: [category_id], references: [id])

  @@map("vh_post_category")
}

model Media {
  id              Int      @id @default(autoincrement())
  encoding        String
  mimetype        String
  destination     String
  filename        String
  path            String
  size            Int
  url_cdn         String?
  title           String?
  alt             String?
  description     String?
  status          String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  user_created_id String
  user_updated_id String

  status_name  Status @relation(fields: [status], references: [name])
  user_updated User   @relation("user_update", fields: [user_updated_id], references: [id])
  user_created User   @relation("user", fields: [user_created_id], references: [id])

  @@map("vh_media")
}
