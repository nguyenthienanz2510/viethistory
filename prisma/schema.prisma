// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id   Int    @id @unique @default(autoincrement())
  name String @unique
  User User[]

  @@map("vh_roles")
}

model UserStatus {
  id   Int    @id @unique @default(autoincrement())
  name String @unique
  User User[]

  @@map("vh_user_status")
}

model User {
  id            String   @id @unique @default(cuid())
  email         String   @unique
  password      String
  refresh_token String?
  username      String   @unique
  phone_number  String?
  role          String
  status        String
  first_name    String?
  last_name     String?
  avatar        String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  role_name          Role       @relation(fields: [role], references: [name])
  status_name        UserStatus @relation(fields: [status], references: [name])
  posts              Post[]     @relation("user")
  posts_updated      Post[]     @relation("user_updated")
  media              Media[]    @relation("user")
  media_updated      Media[]    @relation("user_updated")
  categories         Category[] @relation("user")
  categories_updated Category[] @relation("user_updated")

  @@map("vh_users")
}

model Languages {
  id            Int     @id @unique @default(autoincrement())
  ietf_tag      String
  language_code String  @unique
  country_code  String
  language      String
  country       String
  is_active     Boolean

  posts_translations      PostTranslations[]
  categories_translations CategoryTranslations[]
  media_translations      MediaTranslations[]

  @@map("vh_languages")
}

model Post {
  id               Int      @id @default(autoincrement())
  title            String
  slug             String?  @unique
  description      String
  status           String
  thumb            Int?
  images           String?
  content          String
  timestamp        DateTime
  is_featured      Boolean?
  order            Int?
  meta_title       String?
  meta_description String?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  user_created_id  String
  user_updated_id  String

  status_name   Status             @relation(fields: [status], references: [name])
  user_updated  User               @relation("user_updated", fields: [user_updated_id], references: [id])
  user_created  User               @relation("user", fields: [user_created_id], references: [id])
  categories PostCategory[]
  translations  PostTranslations[]

  @@map("vh_posts")
}

model PostTranslations {
  id               Int     @id @default(autoincrement())
  post_id          Int
  language_code    String
  title            String?
  description      String?
  content          String?
  meta_title       String?
  meta_description String?

  post        Post      @relation(fields: [post_id], references: [id], onDelete: Cascade)
  status_name Languages @relation(fields: [language_code], references: [language_code])

  @@map("vh_posts_translations")
}

model Category {
  id               Int      @id @default(autoincrement())
  parent_id        Int?
  name             String
  slug             String?  @unique
  description      String?
  status           String
  thumb            Int?
  images           String?
  is_featured      Boolean?
  order            Int?
  meta_title       String?
  meta_description String?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  user_created_id  String
  user_updated_id  String

  status_name  Status @relation(fields: [status], references: [name])
  user_updated User   @relation("user_updated", fields: [user_updated_id], references: [id])
  user_created User   @relation("user", fields: [user_created_id], references: [id])

  posts PostCategory[]
  translations  CategoryTranslations[]

  @@map("vh_categories")
}

model CategoryTranslations {
  id               Int     @id @default(autoincrement())
  category_id      Int
  language_code    String
  name             String?
  description      String?
  meta_title       String?
  meta_description String?

  category    Category  @relation(fields: [category_id], references: [id], onDelete: Cascade)
  status_name Languages @relation(fields: [language_code], references: [language_code])

  @@map("vh_categories_translations")
}

model Status {
  id   Int    @id @unique @default(autoincrement())
  name String @unique

  Post     Post[]
  Category Category[]
  Media    Media[]

  @@map("vh_status")
}

model PostCategory {
  post_id     Int
  category_id Int

  post     Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  category Category @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@map("vh_post_category")
  @@id([post_id, category_id])
}

model Media {
  id              Int      @id @default(autoincrement())
  public_id       String
  filename        String
  resource_type   String
  format          String
  size            Int
  width           Int
  height          Int
  url             String
  url_cdn         String?
  title           String?
  alt             String?
  description     String?
  status          String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  user_created_id String
  user_updated_id String

  status_name  Status              @relation(fields: [status], references: [name])
  user_updated User                @relation("user_updated", fields: [user_updated_id], references: [id])
  user_created User                @relation("user", fields: [user_created_id], references: [id])
  translations MediaTranslations[]

  @@map("vh_media")
}

model MediaTranslations {
  id            Int     @id @default(autoincrement())
  media_id      Int
  language_code String
  title         String?
  alt           String?
  description   String?

  media       Media     @relation(fields: [media_id], references: [id], onDelete: Cascade)
  status_name Languages @relation(fields: [language_code], references: [language_code])

  @@map("vh_media_translations")
}
